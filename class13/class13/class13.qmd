---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Emily Hendrickson (PID: A69034780)"
format: pdf
---

RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone. The anti-inflammatory effects on airway smooth muscle (ASM) cells has been known for some time but the underlying molecular mechanisms are unclear.


```{r}
#|message: false
#Loading packages 
library(BiocManager)
suppressMessages(library(DESeq2))
```

```{r}
#load data
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")

#view data
head(counts)
head(metadata)
```

##Q1: How many genes are in this dataset?

```{r}
ncol(counts)
```

##Q2: How many ‘control’ cell lines do we have?

```{r}
nrow(metadata[metadata$dex == "control",])
```

Quick differential expression performed in a bad way that shouldn't be published ever

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[,control$id]
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

Alternative: 

```{r}
suppressMessages(library(dplyr))
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

##Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

The mean is calculated by manually inputting 4 as the number of samples which is not robust. You could instead use rowMeans()

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[,control$id]
control.mean <- rowMeans(control.counts)
head(control.mean)
```

##Q4. Follow the same procedure for the treated samples

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[,treated$id]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

```{r}
#combine mean counts
meancounts <- data.frame(control.mean, treated.mean)
```
##Q5: Create a scatter plot showing the mean of the treated samples against the mean of the control samples

```{r}
plot(meancounts[,1], meancounts[,2], xlab = "Control", ylab = "Treated")
```

```{r}
library(ggplot2)
ggplot(meancounts, aes(control.mean, treated.mean)) +
         geom_point(alpha = 0.4) +
         labs(x = "Control", y = "Treated")
```

##Q6: Try plotting both axes on a log scale

```{r}
plot(meancounts[,1], meancounts[,2], xlab = "Control", ylab = "Treated", log = "xy")
```

Find candidate differentially expressed genes

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

Issue: 0s in data

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

##Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

if missing data for both control and treated


```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

##Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind)
```


##Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```

##Q10. Do you trust these results? Why or why not?

I trust that there is a log fold change in these genes, but I don't trust that it is necessarily significant as we have not tested for significance. 




DESeq



```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```




PCA




```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

DESeq

```{r}
#results(dds)

dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res

data.frame <- as.data.frame(res)
View(data.frame)
```

```{r}
summary(res)
```

Set significant p-value to 0.05

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```


Annotation Data


```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)

res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     keytype="ENSEMBL",
                     column="SYMBOL",
                     multiVals="first")

head(res)
```

##Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.**

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```


Data Vis


```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)

head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Pathway](hsa05310.pathview.png)

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```

![Pathway](hsa05310.pathview.png)









