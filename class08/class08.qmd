---
title: "Mini Project"
author: "Emily Hendrickson (PID: A69034780)"
format: pdf
---

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)

head(wisc.df)
```

To remove the first column and avoid including diagnosis in our analysis:

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
#wisc.data
```

And to save the first diagnosis column for later:

```{r}
# Create diagnosis vector for later 
diagnosis <- as.factor(wisc.df$diagnosis)
#diagnosis
```

**Q1: How many observations are in this dataset?**

```{r}
n.observations <- nrow(wisc.data)
n.observations
  

```

**Q2: How many of the observations have a malignant diagnosis?**

```{r}
n.malignant <- table(wisc.df$diagnosis)["M"]
n.malignant
```

**Q3: How many variables/features in the data are suffixed with \_mean?**

```{r}
n._mean <- length(grep("_mean", colnames(wisc.data)))
n._mean
```

**PCA**
```{r}
# Check column means and standard deviations for scaling
colMeans(wisc.data)

apply(wisc.data,2,sd)
```

Perform PCA with scaling and look at summary

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale = T)
summary(wisc.pr)
```


**Q4: From your results, what proportion of the original variance is captured by the first principal components (PC1)?**

0.4427

```{r}
wisc.pr.summary <- summary(wisc.pr)
plot(wisc.pr.summary$importance[2,])

```

**Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?**

```{r}
sum(wisc.pr.summary$importance[3,] < .70) + 1
```


**Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?**

```{r}
sum(wisc.pr.summary$importance[3,] < .90) + 1
```

Create a biplot of the wisc.pr using the biplot() function.

```{r}
biplot(wisc.pr)
```

**Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?**

This plot is difficult to understand because the data points are not clearly 
differentiated and you can't read any of the labels. It's just a mess. 


```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x, col = diagnosis, 
     xlab = "PC1", ylab = "PC2")
```

**Q8. Generate a similar plot for principal components 1 and 3. 
What do you notice about these plots?**

The plots are easy to interpret and differentiate between each sample. 
PC1 generally differentiates the malignant and benign samples, and PC2 delineates
the diagnosis groups better than PC3. You can tell this because there is less 
overlap between the distribution of the red dots and the black dots in the
PC1 vs PC2 plot compared to the PC1 vs PC3. 

```{r}

plot(wisc.pr$x[,c(1, 3)], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")

```

Using ggplot to make a better figure

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

Looking at the variance 
```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

Proportion of Variance by PC

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")

```

Another alternative

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```



```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

**Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? This tells us how much this original feature contributes to the first PC.**

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

**3. Hierarchical clustering**

First scale the wisc.data data and assign the result to data.scaled.

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

# Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to data.dist.
data.dist <- dist(data.scaled)

#Create a hierarchical clustering model using complete linkage. Manually specify the method argument to hclust() and assign the results to wisc.hclust.
wisc.hclust <- hclust(data.dist, method = "complete")
```

Let’s use the hierarchical clustering model you just created to determine a height (or distance between clusters) where a certain number of clusters exists.

**Q10. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?**

Approximately 20. 20.24330 is closer. 

```{r}
plot(wisc.hclust)
abline(h=20, col="red", lty=2)
```

Selecting number of clusters. 

```{r}
#using cutree() to make 4 clusters 
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)

#using the table() function to compare the cluster membership to the actual diagnoses.
table(wisc.hclust.clusters, diagnosis)


```


As we discussed in our last class videos there are number of different “methods” we can use to combine points during the hierarchical clustering procedure. These include "single", "complete", "average" and (my favorite) "ward.D2".

```{r}
methods <- c("single", "complete", "average", "ward.D2")


for (method in methods) {
  hclust_result <- hclust(data.dist, method = method)
  clusters <- cutree(hclust_result, k = 2)
  plot(hclust_result, main = method)
  
  cat("\nClustering Method:", method, "\n")
  print(table(clusters, diagnosis))
}

```


**Q12. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.**

The ward.D2 method gives my favorite result because it produces the best delineation between the groups while the other methods are less effective. The complete method provides groups, although they are not as differentiated. Having these groups that are well defined is important for modeling and predicting benign vs malignant tumors, so the ward.D2 method is my favorite to use for this case.


**4. Combining methods**

Using the minimum number of principal components required to describe at least 90% of the variability in the data, create a hierarchical clustering model with the linkage method="ward.D2". We use Ward’s criterion here because it is based on multidimensional variance like principal components analysis. Assign the results to wisc.pr.hclust.

```{r}
dist_matrix <- dist(wisc.pr$x[,1:7])
wisc.pr.hclust <- hclust(dist_matrix, method = "ward.D2")
plot(wisc.pr.hclust)

```


```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)

```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```

```{r}
g <- as.factor(grps)
levels(g)

g <- relevel(g,2)
levels(g)

# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters.

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
table(wisc.pr.hclust.clusters, diagnosis)

#FalsePositives
28/188 *100

#FalseNegatives
24/329 *100
```

**Q13. How well does the newly created model with four clusters separate out the two diagnoses?**

The model separates most of the diagnoses, but not all are correctly assigned. The "false positive" rate of a B in the M cluster is 14% and the "false negative" rate of an M in the B cluster is 7%. Both seem very high and not ideal.

**Q14. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.**

```{r}
table(wisc.hclust.clusters, diagnosis)

#FalsePositives
12/165 *100

#FalseNegatives
40/343 *100

```

The clustering in the previoius sections had a lower rate of benign
samples in the predominantly malignant sample cluster but a higher
rate of malignant samples in the predominantly benign sample cluster.
Although overall the clustering may be better, the rate of false
negatives (which is arguably a worse outcome) is much higher.



**6. Prediction**

We will use the predict() function that will take our PCA model from before and new cancer cell data and project that data onto our PCA space.


```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

**Q16. Which of these new patients should we prioritize for follow up based on your results?**

Sample 2 should be prioritized.

